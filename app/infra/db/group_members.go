// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GroupMember is an object representing the database table.
type GroupMember struct {
	ID        uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	IsAdmin   int8      `boil:"is_admin" json:"is_admin" toml:"is_admin" yaml:"is_admin"`
	UserID    uint64    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	GroupID   uint64    `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy string    `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *groupMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupMemberColumns = struct {
	ID        string
	IsAdmin   string
	UserID    string
	GroupID   string
	CreatedAt string
	CreatedBy string
	UpdatedAt string
	UpdatedBy string
}{
	ID:        "id",
	IsAdmin:   "is_admin",
	UserID:    "user_id",
	GroupID:   "group_id",
	CreatedAt: "created_at",
	CreatedBy: "created_by",
	UpdatedAt: "updated_at",
	UpdatedBy: "updated_by",
}

// groupMemberR is where relationships are stored.
type groupMemberR struct {
	Group *Group
	User  *User
}

// groupMemberL is where Load methods for each relationship are stored.
type groupMemberL struct{}

var (
	groupMemberColumns               = []string{"id", "is_admin", "user_id", "group_id", "created_at", "created_by", "updated_at", "updated_by"}
	groupMemberColumnsWithoutDefault = []string{"is_admin", "user_id", "group_id", "created_at", "created_by", "updated_at", "updated_by"}
	groupMemberColumnsWithDefault    = []string{"id"}
	groupMemberPrimaryKeyColumns     = []string{"id"}
)

type (
	// GroupMemberSlice is an alias for a slice of pointers to GroupMember.
	// This should generally be used opposed to []GroupMember.
	GroupMemberSlice []*GroupMember
	// GroupMemberHook is the signature for custom GroupMember hook methods
	GroupMemberHook func(boil.Executor, *GroupMember) error

	groupMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupMemberType                 = reflect.TypeOf(&GroupMember{})
	groupMemberMapping              = queries.MakeStructMapping(groupMemberType)
	groupMemberPrimaryKeyMapping, _ = queries.BindMapping(groupMemberType, groupMemberMapping, groupMemberPrimaryKeyColumns)
	groupMemberInsertCacheMut       sync.RWMutex
	groupMemberInsertCache          = make(map[string]insertCache)
	groupMemberUpdateCacheMut       sync.RWMutex
	groupMemberUpdateCache          = make(map[string]updateCache)
	groupMemberUpsertCacheMut       sync.RWMutex
	groupMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var groupMemberBeforeInsertHooks []GroupMemberHook
var groupMemberBeforeUpdateHooks []GroupMemberHook
var groupMemberBeforeDeleteHooks []GroupMemberHook
var groupMemberBeforeUpsertHooks []GroupMemberHook

var groupMemberAfterInsertHooks []GroupMemberHook
var groupMemberAfterSelectHooks []GroupMemberHook
var groupMemberAfterUpdateHooks []GroupMemberHook
var groupMemberAfterDeleteHooks []GroupMemberHook
var groupMemberAfterUpsertHooks []GroupMemberHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupMember) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupMember) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupMember) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupMember) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupMember) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupMember) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupMember) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupMember) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupMember) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range groupMemberAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupMemberHook registers your hook function for all future operations.
func AddGroupMemberHook(hookPoint boil.HookPoint, groupMemberHook GroupMemberHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		groupMemberBeforeInsertHooks = append(groupMemberBeforeInsertHooks, groupMemberHook)
	case boil.BeforeUpdateHook:
		groupMemberBeforeUpdateHooks = append(groupMemberBeforeUpdateHooks, groupMemberHook)
	case boil.BeforeDeleteHook:
		groupMemberBeforeDeleteHooks = append(groupMemberBeforeDeleteHooks, groupMemberHook)
	case boil.BeforeUpsertHook:
		groupMemberBeforeUpsertHooks = append(groupMemberBeforeUpsertHooks, groupMemberHook)
	case boil.AfterInsertHook:
		groupMemberAfterInsertHooks = append(groupMemberAfterInsertHooks, groupMemberHook)
	case boil.AfterSelectHook:
		groupMemberAfterSelectHooks = append(groupMemberAfterSelectHooks, groupMemberHook)
	case boil.AfterUpdateHook:
		groupMemberAfterUpdateHooks = append(groupMemberAfterUpdateHooks, groupMemberHook)
	case boil.AfterDeleteHook:
		groupMemberAfterDeleteHooks = append(groupMemberAfterDeleteHooks, groupMemberHook)
	case boil.AfterUpsertHook:
		groupMemberAfterUpsertHooks = append(groupMemberAfterUpsertHooks, groupMemberHook)
	}
}

// OneP returns a single groupMember record from the query, and panics on error.
func (q groupMemberQuery) OneP() *GroupMember {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single groupMember record from the query.
func (q groupMemberQuery) One() (*GroupMember, error) {
	o := &GroupMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for group_members")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all GroupMember records from the query, and panics on error.
func (q groupMemberQuery) AllP() GroupMemberSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all GroupMember records from the query.
func (q groupMemberQuery) All() (GroupMemberSlice, error) {
	var o []*GroupMember

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to GroupMember slice")
	}

	if len(groupMemberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all GroupMember records in the query, and panics on error.
func (q groupMemberQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all GroupMember records in the query.
func (q groupMemberQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count group_members rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q groupMemberQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q groupMemberQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if group_members exists")
	}

	return count > 0, nil
}

// GroupG pointed to by the foreign key.
func (o *GroupMember) GroupG(mods ...qm.QueryMod) groupQuery {
	return o.Group(boil.GetDB(), mods...)
}

// Group pointed to by the foreign key.
func (o *GroupMember) Group(exec boil.Executor, mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	query := Groups(exec, queryMods...)
	queries.SetFrom(query.Query, "`groups`")

	return query
}

// UserG pointed to by the foreign key.
func (o *GroupMember) UserG(mods ...qm.QueryMod) userQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *GroupMember) User(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
} // LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (groupMemberL) LoadGroup(e boil.Executor, singular bool, maybeGroupMember interface{}) error {
	var slice []*GroupMember
	var object *GroupMember

	count := 1
	if singular {
		object = maybeGroupMember.(*GroupMember)
	} else {
		slice = *maybeGroupMember.(*[]*GroupMember)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &groupMemberR{}
		}
		args[0] = object.GroupID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &groupMemberR{}
			}
			args[i] = obj.GroupID
		}
	}

	query := fmt.Sprintf(
		"select * from `groups` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}
	defer results.Close()

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if len(groupMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Group = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (groupMemberL) LoadUser(e boil.Executor, singular bool, maybeGroupMember interface{}) error {
	var slice []*GroupMember
	var object *GroupMember

	count := 1
	if singular {
		object = maybeGroupMember.(*GroupMember)
	} else {
		slice = *maybeGroupMember.(*[]*GroupMember)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &groupMemberR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &groupMemberR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from `users` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(groupMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetGroupG of the group_member to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupMembers.
// Uses the global database handle.
func (o *GroupMember) SetGroupG(insert bool, related *Group) error {
	return o.SetGroup(boil.GetDB(), insert, related)
}

// SetGroupP of the group_member to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupMembers.
// Panics on error.
func (o *GroupMember) SetGroupP(exec boil.Executor, insert bool, related *Group) {
	if err := o.SetGroup(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGroupGP of the group_member to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupMembers.
// Uses the global database handle and panics on error.
func (o *GroupMember) SetGroupGP(insert bool, related *Group) {
	if err := o.SetGroup(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGroup of the group_member to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupMembers.
func (o *GroupMember) SetGroup(exec boil.Executor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
		strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID

	if o.R == nil {
		o.R = &groupMemberR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupMembers: GroupMemberSlice{o},
		}
	} else {
		related.R.GroupMembers = append(related.R.GroupMembers, o)
	}

	return nil
}

// SetUserG of the group_member to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GroupMembers.
// Uses the global database handle.
func (o *GroupMember) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the group_member to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GroupMembers.
// Panics on error.
func (o *GroupMember) SetUserP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the group_member to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GroupMembers.
// Uses the global database handle and panics on error.
func (o *GroupMember) SetUserGP(insert bool, related *User) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the group_member to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GroupMembers.
func (o *GroupMember) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &groupMemberR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			GroupMembers: GroupMemberSlice{o},
		}
	} else {
		related.R.GroupMembers = append(related.R.GroupMembers, o)
	}

	return nil
}

// GroupMembersG retrieves all records.
func GroupMembersG(mods ...qm.QueryMod) groupMemberQuery {
	return GroupMembers(boil.GetDB(), mods...)
}

// GroupMembers retrieves all the records using an executor.
func GroupMembers(exec boil.Executor, mods ...qm.QueryMod) groupMemberQuery {
	mods = append(mods, qm.From("`group_members`"))
	return groupMemberQuery{NewQuery(exec, mods...)}
}

// FindGroupMemberG retrieves a single record by ID.
func FindGroupMemberG(id uint64, selectCols ...string) (*GroupMember, error) {
	return FindGroupMember(boil.GetDB(), id, selectCols...)
}

// FindGroupMemberGP retrieves a single record by ID, and panics on error.
func FindGroupMemberGP(id uint64, selectCols ...string) *GroupMember {
	retobj, err := FindGroupMember(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindGroupMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupMember(exec boil.Executor, id uint64, selectCols ...string) (*GroupMember, error) {
	groupMemberObj := &GroupMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `group_members` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(groupMemberObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from group_members")
	}

	return groupMemberObj, nil
}

// FindGroupMemberP retrieves a single record by ID with an executor, and panics on error.
func FindGroupMemberP(exec boil.Executor, id uint64, selectCols ...string) *GroupMember {
	retobj, err := FindGroupMember(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GroupMember) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *GroupMember) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *GroupMember) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *GroupMember) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("db: no group_members provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupMemberColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	groupMemberInsertCacheMut.RLock()
	cache, cached := groupMemberInsertCache[key]
	groupMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			groupMemberColumns,
			groupMemberColumnsWithDefault,
			groupMemberColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `group_members` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `group_members` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `group_members` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into group_members")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == groupMemberMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for group_members")
	}

CacheNoHooks:
	if !cached {
		groupMemberInsertCacheMut.Lock()
		groupMemberInsertCache[key] = cache
		groupMemberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single GroupMember record. See Update for
// whitelist behavior description.
func (o *GroupMember) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single GroupMember record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *GroupMember) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the GroupMember, and panics on error.
// See Update for whitelist behavior description.
func (o *GroupMember) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the GroupMember.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *GroupMember) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	groupMemberUpdateCacheMut.RLock()
	cache, cached := groupMemberUpdateCache[key]
	groupMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			groupMemberColumns,
			groupMemberPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("db: unable to update group_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `group_members` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, append(wl, groupMemberPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "db: unable to update group_members row")
	}

	if !cached {
		groupMemberUpdateCacheMut.Lock()
		groupMemberUpdateCache[key] = cache
		groupMemberUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q groupMemberQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q groupMemberQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "db: unable to update all for group_members")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GroupMemberSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o GroupMemberSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o GroupMemberSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupMemberSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `group_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupMemberPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "db: unable to update all in groupMember slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GroupMember) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *GroupMember) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *GroupMember) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *GroupMember) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("db: no group_members provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupMemberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupMemberUpsertCacheMut.RLock()
	cache, cached := groupMemberUpsertCache[key]
	groupMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			groupMemberColumns,
			groupMemberColumnsWithDefault,
			groupMemberColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			groupMemberColumns,
			groupMemberPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("db: unable to upsert group_members, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "group_members", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `group_members` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "db: unable to upsert for group_members")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == groupMemberMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "db: unable to populate default values for group_members")
	}

CacheNoHooks:
	if !cached {
		groupMemberUpsertCacheMut.Lock()
		groupMemberUpsertCache[key] = cache
		groupMemberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single GroupMember record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *GroupMember) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single GroupMember record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GroupMember) DeleteG() error {
	if o == nil {
		return errors.New("db: no GroupMember provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single GroupMember record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *GroupMember) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single GroupMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupMember) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("db: no GroupMember provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupMemberPrimaryKeyMapping)
	sql := "DELETE FROM `group_members` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "db: unable to delete from group_members")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q groupMemberQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q groupMemberQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("db: no groupMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "db: unable to delete all from group_members")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o GroupMemberSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o GroupMemberSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("db: no GroupMember slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o GroupMemberSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupMemberSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("db: no GroupMember slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(groupMemberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `group_members` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupMemberPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "db: unable to delete all from groupMember slice")
	}

	if len(groupMemberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *GroupMember) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *GroupMember) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GroupMember) ReloadG() error {
	if o == nil {
		return errors.New("db: no GroupMember provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupMember) Reload(exec boil.Executor) error {
	ret, err := FindGroupMember(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GroupMemberSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GroupMemberSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupMemberSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("db: empty GroupMemberSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupMemberSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	groupMembers := GroupMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `group_members`.* FROM `group_members` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&groupMembers)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in GroupMemberSlice")
	}

	*o = groupMembers

	return nil
}

// GroupMemberExists checks if the GroupMember row exists.
func GroupMemberExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `group_members` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if group_members exists")
	}

	return exists, nil
}

// GroupMemberExistsG checks if the GroupMember row exists.
func GroupMemberExistsG(id uint64) (bool, error) {
	return GroupMemberExists(boil.GetDB(), id)
}

// GroupMemberExistsGP checks if the GroupMember row exists. Panics on error.
func GroupMemberExistsGP(id uint64) bool {
	e, err := GroupMemberExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// GroupMemberExistsP checks if the GroupMember row exists. Panics on error.
func GroupMemberExistsP(exec boil.Executor, id uint64) bool {
	e, err := GroupMemberExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
